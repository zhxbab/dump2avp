#!/usr/bin/env python3.3
# -*- coding: utf-8 -*-
'Dump Moduel'
__author__ = 'Ken Zhao'
import os, logging, sys, re, signal, tracer
from optparse import OptionParser
from logging import info,debug,error,warning,critical
from avp import Avp
from mem import Mem
from tbdm import Tbdm
from copy import deepcopy,copy
from operator import eq
class Dump:
    def __init__(self,args):
        if len(args) == 0:
            error("No parameters! Please use -h")
            sys.exit()
        else:
            self.__path = os.path.abspath(".")#return current path(absolute path)
            self.Parse_input(args)
            self.Set_logging() #Set logging
            signal.signal(signal.SIGINT,self.Sigint_handler)
            self.__major_dump_initial_start = 0;
            self.__major_dump_initial_end = 0;
            self.__major_dump_result_start = 0;
            self.__major_dump_result_end = 0;
            self.__smm_start = 0
            self.__smm_end = 0
            self.__tr7 = 0;
            self.__avp_file = self.option.dump_log+".avp"
            self.initial_program = Mem(1)
            self.result_program = Mem(1)
            self.initial_data_seg = Mem() # initail part part 
            self.result_data_seg = Mem() # result data part
            self.io_cmds = Tbdm("//IO TBD CMDS #0")
            self.reload_cmds = Tbdm("//RELOAD TBD CMDS #0")
            self.smm_cmds = Tbdm("//SMM TBD CMDS #0")
            if self.option._debug:
                self.__debug_file = self.option.dump_log+".debug"
            
    def Parse_input(self,args):
        global para
        parser = OptionParser(usage="%prog arg1 arg2", version="%prog 0.1") #2016-01-15 version 0.2
        parser.add_option("-f","--file", dest="dump_log", help="The dump log file that generated by bochs", type = "str")
        parser.add_option("--debug", dest="_debug", help="Enable the debug mode for dump2avp", action="store_true", default = False)
        (self.option, self.additions) = parser.parse_args(args)
        
    
    def Set_logging(self):
        if self.option._debug == True: plevel = logging.DEBUG #plevel is the print information level
        else: plevel = logging.INFO
        logging.basicConfig(level=plevel, format="%(asctime)s %(filename)10s[line:%(lineno)6d] %(levelname)8s: %(message)s",
                        datefmt="%a, %d %b %Y %H:%M:%S", stream=sys.stdout)
        
    def Sigint_handler(self, signal, frame):
        critical("Ctrl+C pressed and Exit!!!")
        sys.exit(0)
        
    def Parse_dump(self):
        self.option.dump_log = os.path.join(self.__path,self.option.dump_log)
        with open(self.option.dump_log,"r") as fdl:
            while True:
                line = fdl.readline()
                if line:
                    line = line.strip()
                    if re.search(r'initial start',line): 
                        self.__major_dump_initial_start = 1
                        
                    if (self.__major_dump_initial_start == 1) and (self.__major_dump_initial_end == 0):
                        self.update_data(line,tracer.major_dump_initial)
                        
                    if re.search(r'initial end',line): 
                        self.__major_dump_initial_end = 1
                        
                    if re.search(r'result start',line): 
                        self.__major_dump_result_start = 1
                        
                    if (self.__major_dump_result_start == 0) and (self.__major_dump_initial_end == 1):
                        self.check_mini_dump(line)
                        if self.__smm_start == 1 and self.__smm_end == 0:
                            self.update_program_mem(line,self.initial_program,self.result_program,tracer.SMM_BASE)
                            self.update_data_mem(line,self.initial_data_seg,self.result_data_seg,tracer.SMM_BASE)
                        else:
                            self.update_program_mem(line,self.initial_program,self.result_program)
                            self.update_data_mem(line,self.initial_data_seg,self.result_data_seg)
                            
                        if self.option._debug:
                            self.gen_debug_file()
                        
                    if (self.__major_dump_result_start == 1) and (self.__major_dump_result_end == 0):
                        self.update_data(line,tracer.major_dump_result)
                        
                    if re.search(r'result end',line): 
                        self.__major_dump_result_end = 1
                        
                    if re.search(r'INSTR: (\d+)',line):
                        self.__tr7 = self.__tr7 + 1 
                    
                else:
                    self.update_tr7(self.__tr7-1)# -1 is sync tracer tr7 
                    self.gen_avp()
                    break;
                            
    def update_arch_regs(self, line, data_hash):
        
        m = re.search(r'rax: (\w+)_(\w+) rcx: (\w+)_(\w+)',line)
        if m:
            data_hash["RAX"]["value_h"] = m.group(1)
            data_hash["RAX"]["value_l"] = m.group(2)
            data_hash["RCX"]["value_h"] = m.group(3)
            data_hash["RCX"]["value_l"] = m.group(4)
            
        m = re.search(r'rdx: (\w+)_(\w+) rbx: (\w+)_(\w+)',line)
        if m:
            data_hash["RDX"]["value_h"] = m.group(1)
            data_hash["RDX"]["value_l"] = m.group(2)
            data_hash["RBX"]["value_h"] = m.group(3)
            data_hash["RBX"]["value_l"] = m.group(4)
            
        m = re.search(r'rsp: (\w+)_(\w+) rbp: (\w+)_(\w+)',line)
        if m:
            data_hash["RSP"]["value_h"] = m.group(1)
            data_hash["RSP"]["value_l"] = m.group(2)
            data_hash["RBP"]["value_h"] = m.group(3)
            data_hash["RBP"]["value_l"] = m.group(4)
        
        m = re.search(r'rsi: (\w+)_(\w+) rdi: (\w+)_(\w+)',line)
        if m:
            data_hash["RSI"]["value_h"] = m.group(1)
            data_hash["RSI"]["value_l"] = m.group(2)
            data_hash["RDI"]["value_h"] = m.group(3)
            data_hash["RDI"]["value_l"] = m.group(4)
            
        m = re.search(r'r8 : (\w+)_(\w+) r9 : (\w+)_(\w+)',line)
        if m:
            data_hash["R8"]["value_h"] = m.group(1)
            data_hash["R8"]["value_l"] = m.group(2)
            data_hash["R9"]["value_h"] = m.group(3)
            data_hash["R9"]["value_l"] = m.group(4)
            
        m = re.search(r'r10: (\w+)_(\w+) r11: (\w+)_(\w+)',line)
        if m:
            data_hash["R10"]["value_h"] = m.group(1)
            data_hash["R10"]["value_l"] = m.group(2)
            data_hash["R11"]["value_h"] = m.group(3)
            data_hash["R11"]["value_l"] = m.group(4)
            
        m = re.search(r'r12: (\w+)_(\w+) r13: (\w+)_(\w+)',line)
        if m:
            data_hash["R12"]["value_h"] = m.group(1)
            data_hash["R12"]["value_l"] = m.group(2)
            data_hash["R13"]["value_h"] = m.group(3)
            data_hash["R13"]["value_l"] = m.group(4)
            
        m = re.search(r'r14: (\w+)_(\w+) r15: (\w+)_(\w+)',line)
        if m:
            data_hash["R14"]["value_h"] = m.group(1)
            data_hash["R14"]["value_l"] = m.group(2)
            data_hash["R15"]["value_h"] = m.group(3)
            data_hash["R15"]["value_l"] = m.group(4)
            
        m = re.search(r'rip: (\w+)_(\w+)',line)
        if m:
            data_hash["RIP"]["value_h"] = m.group(1)
            data_hash["RIP"]["value_l"] = m.group(2)

            
        m = re.search(r'eflags 0x(\w+):',line)
        if m:
            data_hash["EFLAGS"]["value"] = m.group(1)
            
        m = re.search(r'CR0=0x(\w+): pg',line)
        if m:
            data_hash["CR0"]["value_l"] = m.group(1)
            data_hash["CR0"]["value_h"] = "00000000"
            
        m = re.search(r'CR2=page fault laddr=0x(\w+)',line)
        if m:
            data_hash["CR2"]["value_h"] = m.group(1)[0:8]
            data_hash["CR2"]["value_l"] = m.group(1)[8:16]
            
        m = re.search(r'CR3=0x(\w+)',line)
        if m:
            data_hash["CR3"]["value_h"] = "0000"+m.group(1)[0:4]
            data_hash["CR3"]["value_l"] = m.group(1)[4:12]
        
        m = re.search(r'CR4=0x(\w+):',line)
        if m:
            data_hash["CR4"]["value_l"] = m.group(1)
            data_hash["CR4"]["value_h"] = "00000000"
            
        m = re.search(r'CR8: 0x(\w+)',line)
        if m:
            data_hash["CR8"]["value_h"] = "00000000"
            data_hash["CR8"]["value_l"] = "0000000"+m.group(1)
            
        m = re.search(r'EFER=0x(\w+): ffxsr',line)
        if m:
            data_hash["EFER"]["value_l"] = m.group(1)
            data_hash["EFER"]["value_h"] = "00000000"
            
        m = re.search(r'XCR0=0x(\w+): hi_zmm',line)
        if m:
            data_hash["XCR0"]["value_l"] = m.group(1)
            data_hash["XCR0"]["value_h"] = "00000000"
            
        m = re.search(r'es:0x(\w+), dh=0x(\w+), dl=0x(\w+)',line)
        if m:
            data_hash["ES"]["value"] = m.group(1)
            data_hash["ES"]["value_h"] = m.group(2)
            data_hash["ES"]["value_l"] = m.group(3)
        
        m = re.search(r'cs:0x(\w+), dh=0x(\w+), dl=0x(\w+)',line)
        if m:
            data_hash["CS"]["value"] = m.group(1)
            data_hash["CS"]["value_h"] = m.group(2)
            data_hash["CS"]["value_l"] = m.group(3)
            
        m = re.search(r'ds:0x(\w+), dh=0x(\w+), dl=0x(\w+)',line)
        if m:
            data_hash["DS"]["value"] = m.group(1)
            data_hash["DS"]["value_h"] = m.group(2)
            data_hash["DS"]["value_l"] = m.group(3)
        
        m = re.search(r'ss:0x(\w+), dh=0x(\w+), dl=0x(\w+)',line)
        if m:
            data_hash["SS"]["value"] = m.group(1)
            data_hash["SS"]["value_h"] = m.group(2)
            data_hash["SS"]["value_l"] = m.group(3)
        
        m = re.search(r'fs:0x(\w+), dh=0x(\w+), dl=0x(\w+)',line)
        if m:
            data_hash["FS"]["value"] = m.group(1)
            data_hash["FS"]["value_h"] = m.group(2)
            data_hash["FS"]["value_l"] = m.group(3)
        
        m = re.search(r'gs:0x(\w+), dh=0x(\w+), dl=0x(\w+)',line)
        if m:
            data_hash["GS"]["value"] = m.group(1)
            data_hash["GS"]["value_h"] = m.group(2)
            data_hash["GS"]["value_l"] = m.group(3)
        
        m = re.search(r'ldtr:0x(\w+), dh=0x(\w+), dl=0x(\w+)',line)
        if m:
            data_hash["LDTR"]["value"] = m.group(1)
            data_hash["LDTR"]["value_h"] = m.group(2)
            data_hash["LDTR"]["value_l"] = m.group(3)
            
        m = re.search(r'tr:0x(\w+), dh=0x(\w+), dl=0x(\w+)',line)
        if m:
            data_hash["TR"]["value"] = m.group(1)
            data_hash["TR"]["value_h"] = m.group(2)
            data_hash["TR"]["value_l"] = m.group(3)
            
        m = re.search(r'gdtr:base=0x(\w+), limit=0x(\w+)',line)
        if m:
            data_hash["GDTR"]["base"] = m.group(1)
            data_hash["GDTR"]["limit"] = m.group(2)

        m = re.search(r'idtr:base=0x(\w+), limit=0x(\w+)',line)
        if m:
            data_hash["IDTR"]["base"] = m.group(1)
            data_hash["IDTR"]["limit"] = m.group(2)
        
    def print_arch_regs(self, data_hash):
        
        if self.option._debug == 1:
            info("RAX is %s_%s"%(data_hash["RAX"]["value_h"],data_hash["RAX"]["value_l"]))
            info("RBX is %s_%s"%(data_hash["RBX"]["value_h"],data_hash["RBX"]["value_l"]))
            info("RCX is %s_%s"%(data_hash["RCX"]["value_h"],data_hash["RCX"]["value_l"]))
            info("RDX is %s_%s"%(data_hash["RDX"]["value_h"],data_hash["RDX"]["value_l"]))
            info("RSP is %s_%s"%(data_hash["RSP"]["value_h"],data_hash["RSP"]["value_l"]))
            info("RBP is %s_%s"%(data_hash["RBP"]["value_h"],data_hash["RBP"]["value_l"]))
            info("RSI is %s_%s"%(data_hash["RSI"]["value_h"],data_hash["RSI"]["value_l"]))
            info("RDI is %s_%s"%(data_hash["RDI"]["value_h"],data_hash["RDI"]["value_l"]))
            info("R8 is %s_%s"%(data_hash["R8"]["value_h"],data_hash["R8"]["value_l"]))
            info("R9 is %s_%s"%(data_hash["R9"]["value_h"],data_hash["R9"]["value_l"]))
            info("R10 is %s_%s"%(data_hash["R10"]["value_h"],data_hash["R10"]["value_l"]))
            info("R11 is %s_%s"%(data_hash["R11"]["value_h"],data_hash["R11"]["value_l"]))
            info("R12 is %s_%s"%(data_hash["R12"]["value_h"],data_hash["R12"]["value_l"]))
            info("R13 is %s_%s"%(data_hash["R13"]["value_h"],data_hash["R13"]["value_l"]))
            info("R14 is %s_%s"%(data_hash["R14"]["value_h"],data_hash["R14"]["value_l"]))
            info("R15 is %s_%s"%(data_hash["R15"]["value_h"],data_hash["R15"]["value_l"]))
            info("RIP is %s_%s"%(data_hash["RIP"]["value_h"],data_hash["RIP"]["value_l"]))
            info("EFLAGS is %s"%(data_hash["EFLAGS"]["value"]))
            info("CR0 is %s%s"%(data_hash["CR0"]["value_h"],data_hash["CR0"]["value_l"]))
            info("CR2 is %s%s"%(data_hash["CR2"]["value_h"],data_hash["CR2"]["value_l"]))
            info("CR3 is %s%s"%(data_hash["CR3"]["value_h"],data_hash["CR3"]["value_l"]))
            info("CR4 is %s%s"%(data_hash["CR4"]["value_h"],data_hash["CR4"]["value_l"]))
            info("CR8 is %s%s"%(data_hash["CR8"]["value_h"],data_hash["CR8"]["value_l"]))
            info("XCR0 is %s%s"%(data_hash["XCR0"]["value_h"],data_hash["XCR0"]["value_l"]))
            info("EFER is %s%s"%(data_hash["EFER"]["value_h"],data_hash["EFER"]["value_l"]))
            info("CS is %s, dh=%s, dl=%s"%(data_hash["CS"]["value"],data_hash["CS"]["value_h"],data_hash["CS"]["value_l"]))
            info("DS is %s, dh=%s, dl=%s"%(data_hash["DS"]["value"],data_hash["DS"]["value_h"],data_hash["DS"]["value_l"]))
            info("SS is %s, dh=%s, dl=%s"%(data_hash["SS"]["value"],data_hash["SS"]["value_h"],data_hash["SS"]["value_l"]))
            info("ES is %s, dh=%s, dl=%s"%(data_hash["ES"]["value"],data_hash["ES"]["value_h"],data_hash["ES"]["value_l"]))
            info("FS is %s, dh=%s, dl=%s"%(data_hash["FS"]["value"],data_hash["FS"]["value_h"],data_hash["FS"]["value_l"]))
            info("GS is %s, dh=%s, dl=%s"%(data_hash["GS"]["value"],data_hash["GS"]["value_h"],data_hash["GS"]["value_l"]))
            info("LDTR is %s, dh=%s, dl=%s"%(data_hash["LDTR"]["value"],data_hash["LDTR"]["value_h"],data_hash["LDTR"]["value_l"]))
            info("TR is %s, dh=%s, dl=%s"%(data_hash["TR"]["value"],data_hash["TR"]["value_h"],data_hash["TR"]["value_l"]))
            info("GDTR is base=%s, limit=%s"%(data_hash["GDTR"]["base"],data_hash["GDTR"]["limit"]))
            info("IDTR is base=%s, limit=%s"%(data_hash["IDTR"]["base"],data_hash["IDTR"]["limit"]))
            
    def print_msrs(self, data_hash):
        
        if self.option._debug == 1:
            info("MSR_10 is %s_%s"%(data_hash["MSR_10"]["value_h"],data_hash["MSR_10"]["value_l"]))
            info("MSR_1b is %s_%s"%(data_hash["MSR_1b"]["value_h"],data_hash["MSR_1b"]["value_l"]))
            info("MSR_174 is %s_%s"%(data_hash["MSR_174"]["value_h"],data_hash["MSR_174"]["value_l"]))
            info("MSR_175 is %s_%s"%(data_hash["MSR_175"]["value_h"],data_hash["MSR_175"]["value_l"]))
            info("MSR_176 is %s_%s"%(data_hash["MSR_176"]["value_h"],data_hash["MSR_176"]["value_l"]))
            info("MSR_fe is %s_%s"%(data_hash["MSR_fe"]["value_h"],data_hash["MSR_fe"]["value_l"]))
            info("MSR_200 is %s_%s"%(data_hash["MSR_200"]["value_h"],data_hash["MSR_200"]["value_l"]))
            info("MSR_201 is %s_%s"%(data_hash["MSR_201"]["value_h"],data_hash["MSR_201"]["value_l"]))
            info("MSR_202 is %s_%s"%(data_hash["MSR_202"]["value_h"],data_hash["MSR_202"]["value_l"]))
            info("MSR_203 is %s_%s"%(data_hash["MSR_203"]["value_h"],data_hash["MSR_203"]["value_l"]))
            info("MSR_204 is %s_%s"%(data_hash["MSR_204"]["value_h"],data_hash["MSR_204"]["value_l"]))
            info("MSR_205 is %s_%s"%(data_hash["MSR_205"]["value_h"],data_hash["MSR_205"]["value_l"]))
            info("MSR_206 is %s_%s"%(data_hash["MSR_206"]["value_h"],data_hash["MSR_206"]["value_l"]))
            info("MSR_207 is %s_%s"%(data_hash["MSR_207"]["value_h"],data_hash["MSR_207"]["value_l"]))
            info("MSR_208 is %s_%s"%(data_hash["MSR_208"]["value_h"],data_hash["MSR_208"]["value_l"]))
            info("MSR_209 is %s_%s"%(data_hash["MSR_209"]["value_h"],data_hash["MSR_209"]["value_l"]))
            info("MSR_20a is %s_%s"%(data_hash["MSR_20a"]["value_h"],data_hash["MSR_20a"]["value_l"]))
            info("MSR_20b is %s_%s"%(data_hash["MSR_20b"]["value_h"],data_hash["MSR_20b"]["value_l"]))
            info("MSR_20c is %s_%s"%(data_hash["MSR_20c"]["value_h"],data_hash["MSR_20c"]["value_l"]))
            info("MSR_20d is %s_%s"%(data_hash["MSR_20d"]["value_h"],data_hash["MSR_20d"]["value_l"]))
            info("MSR_20e is %s_%s"%(data_hash["MSR_20e"]["value_h"],data_hash["MSR_20e"]["value_l"]))
            info("MSR_20f is %s_%s"%(data_hash["MSR_20f"]["value_h"],data_hash["MSR_20f"]["value_l"]))
            info("MSR_250 is %s_%s"%(data_hash["MSR_250"]["value_h"],data_hash["MSR_250"]["value_l"]))
            info("MSR_258 is %s_%s"%(data_hash["MSR_258"]["value_h"],data_hash["MSR_258"]["value_l"]))
            info("MSR_259 is %s_%s"%(data_hash["MSR_259"]["value_h"],data_hash["MSR_259"]["value_l"]))
            info("MSR_268 is %s_%s"%(data_hash["MSR_268"]["value_h"],data_hash["MSR_268"]["value_l"]))
            info("MSR_269 is %s_%s"%(data_hash["MSR_269"]["value_h"],data_hash["MSR_269"]["value_l"]))
            info("MSR_26a is %s_%s"%(data_hash["MSR_26a"]["value_h"],data_hash["MSR_26a"]["value_l"]))
            info("MSR_26b is %s_%s"%(data_hash["MSR_26b"]["value_h"],data_hash["MSR_26b"]["value_l"]))
            info("MSR_26c is %s_%s"%(data_hash["MSR_26c"]["value_h"],data_hash["MSR_26c"]["value_l"]))
            info("MSR_26d is %s_%s"%(data_hash["MSR_26d"]["value_h"],data_hash["MSR_26d"]["value_l"]))
            info("MSR_26e is %s_%s"%(data_hash["MSR_26e"]["value_h"],data_hash["MSR_26e"]["value_l"]))
            info("MSR_26f is %s_%s"%(data_hash["MSR_26f"]["value_h"],data_hash["MSR_26f"]["value_l"]))
            info("MSR_277 is %s_%s"%(data_hash["MSR_277"]["value_h"],data_hash["MSR_277"]["value_l"]))
            info("MSR_2ff is %s_%s"%(data_hash["MSR_2ff"]["value_h"],data_hash["MSR_2ff"]["value_l"]))
            info("MSR_6e0 is %s_%s"%(data_hash["MSR_6e0"]["value_h"],data_hash["MSR_6e0"]["value_l"]))
            info("MSR_c0000080 is %s_%s"%(data_hash["MSR_c0000080"]["value_h"],data_hash["MSR_c0000080"]["value_l"]))
            info("MSR_c0000081 is %s_%s"%(data_hash["MSR_c0000081"]["value_h"],data_hash["MSR_c0000081"]["value_l"]))
            info("MSR_c0000082 is %s_%s"%(data_hash["MSR_c0000082"]["value_h"],data_hash["MSR_c0000082"]["value_l"]))
            info("MSR_c0000083 is %s_%s"%(data_hash["MSR_c0000083"]["value_h"],data_hash["MSR_c0000083"]["value_l"]))
            info("MSR_c0000084 is %s_%s"%(data_hash["MSR_c0000084"]["value_h"],data_hash["MSR_c0000084"]["value_l"]))
            info("MSR_c0000100 is %s_%s"%(data_hash["MSR_c0000100"]["value_h"],data_hash["MSR_c0000100"]["value_l"]))
            info("MSR_c0000101 is %s_%s"%(data_hash["MSR_c0000101"]["value_h"],data_hash["MSR_c0000101"]["value_l"]))
            info("MSR_c0000102 is %s_%s"%(data_hash["MSR_c0000102"]["value_h"],data_hash["MSR_c0000102"]["value_l"]))
            info("MSR_c0000103 is %s_%s"%(data_hash["MSR_c0000103"]["value_h"],data_hash["MSR_c0000103"]["value_l"]))
            info("MSR_480 is %s_%s"%(data_hash["MSR_480"]["value_h"],data_hash["MSR_480"]["value_l"]))
            info("MSR_481 is %s_%s"%(data_hash["MSR_481"]["value_h"],data_hash["MSR_481"]["value_l"]))
            info("MSR_482 is %s_%s"%(data_hash["MSR_482"]["value_h"],data_hash["MSR_482"]["value_l"]))
            info("MSR_483 is %s_%s"%(data_hash["MSR_483"]["value_h"],data_hash["MSR_483"]["value_l"]))
            info("MSR_484 is %s_%s"%(data_hash["MSR_484"]["value_h"],data_hash["MSR_484"]["value_l"]))
            info("MSR_485 is %s_%s"%(data_hash["MSR_485"]["value_h"],data_hash["MSR_485"]["value_l"]))
            info("MSR_486 is %s_%s"%(data_hash["MSR_486"]["value_h"],data_hash["MSR_486"]["value_l"]))
            info("MSR_487 is %s_%s"%(data_hash["MSR_487"]["value_h"],data_hash["MSR_487"]["value_l"]))
            info("MSR_488 is %s_%s"%(data_hash["MSR_488"]["value_h"],data_hash["MSR_488"]["value_l"]))
            info("MSR_489 is %s_%s"%(data_hash["MSR_489"]["value_h"],data_hash["MSR_489"]["value_l"]))
            info("MSR_48a is %s_%s"%(data_hash["MSR_48a"]["value_h"],data_hash["MSR_48a"]["value_l"]))
            info("MSR_48b is %s_%s"%(data_hash["MSR_48b"]["value_h"],data_hash["MSR_48b"]["value_l"]))
            info("MSR_3a is %s_%s"%(data_hash["MSR_3a"]["value_h"],data_hash["MSR_3a"]["value_l"]))
            
    def print_fpu(self, data_hash):
        
        if self.option._debug == 1:
            info("STATUS_W is %s"%(data_hash["STATUS_W"]["value"]))
            info("CONTROL_W is %s"%(data_hash["CONTROL_W"]["value"]))
            info("TAG_W is %s"%(data_hash["TAG_W"]["value"]))
            info("OPERAND is %s"%(data_hash["OPERAND"]["value"]))
            info("FIP is %s_%s"%(data_hash["FIP"]["value_h"],data_hash["FIP"]["value_l"]))
            info("FCS is %s"%(data_hash["FCS"]["value"]))
            info("FDP is %s_%s"%(data_hash["FDP"]["value_h"],data_hash["FDP"]["value_l"]))
            info("FDS is %s"%(data_hash["FDS"]["value"]))
            info("FP0_ST0 is %s:%s%s"%(data_hash["FP0_ST0"]["value"],data_hash["FP0_ST0"]["value_h"],data_hash["FP0_ST0"]["value_l"]))
            info("FP1_ST1 is %s:%s%s"%(data_hash["FP1_ST1"]["value"],data_hash["FP1_ST1"]["value_h"],data_hash["FP1_ST1"]["value_l"]))
            info("FP2_ST2 is %s:%s%s"%(data_hash["FP2_ST2"]["value"],data_hash["FP2_ST2"]["value_h"],data_hash["FP2_ST2"]["value_l"]))
            info("FP3_ST3 is %s:%s%s"%(data_hash["FP3_ST3"]["value"],data_hash["FP3_ST3"]["value_h"],data_hash["FP3_ST3"]["value_l"]))
            info("FP4_ST4 is %s:%s%s"%(data_hash["FP4_ST4"]["value"],data_hash["FP4_ST4"]["value_h"],data_hash["FP4_ST4"]["value_l"]))
            info("FP5_ST5 is %s:%s%s"%(data_hash["FP5_ST5"]["value"],data_hash["FP5_ST5"]["value_h"],data_hash["FP5_ST5"]["value_l"]))
            info("FP6_ST6 is %s:%s%s"%(data_hash["FP6_ST6"]["value"],data_hash["FP6_ST6"]["value_h"],data_hash["FP6_ST6"]["value_l"]))
            info("FP7_ST7 is %s:%s%s"%(data_hash["FP7_ST7"]["value"],data_hash["FP7_ST7"]["value_h"],data_hash["FP7_ST7"]["value_l"]))
    
    def print_mmx_sse_avx(self, data_hash):
        
        if self.option._debug == 1:
            info("MM0 is %s_%s"%(data_hash["MM0"]["value_h"],data_hash["MM0"]["value_l"]))
            info("MM1 is %s_%s"%(data_hash["MM1"]["value_h"],data_hash["MM1"]["value_l"]))
            info("MM2 is %s_%s"%(data_hash["MM2"]["value_h"],data_hash["MM2"]["value_l"]))
            info("MM3 is %s_%s"%(data_hash["MM3"]["value_h"],data_hash["MM3"]["value_l"]))
            info("MM4 is %s_%s"%(data_hash["MM4"]["value_h"],data_hash["MM4"]["value_l"]))
            info("MM5 is %s_%s"%(data_hash["MM5"]["value_h"],data_hash["MM5"]["value_l"]))
            info("MM6 is %s_%s"%(data_hash["MM6"]["value_h"],data_hash["MM6"]["value_l"]))
            info("MM7 is %s_%s"%(data_hash["MM7"]["value_h"],data_hash["MM7"]["value_l"]))
            info("MXCSR is %s"%(data_hash["MXCSR"]["value"]))
            info("VMM00 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM00"]["data_7"],data_hash["VMM00"]["data_6"],data_hash["VMM00"]["data_5"],data_hash["VMM00"]["data_4"]\
                   ,data_hash["VMM00"]["data_3"],data_hash["VMM00"]["data_2"],data_hash["VMM00"]["data_1"],data_hash["VMM00"]["data_0"]))
            info("VMM01 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM01"]["data_7"],data_hash["VMM01"]["data_6"],data_hash["VMM01"]["data_5"],data_hash["VMM01"]["data_4"]\
                   ,data_hash["VMM01"]["data_3"],data_hash["VMM01"]["data_2"],data_hash["VMM01"]["data_1"],data_hash["VMM01"]["data_0"]))
            info("VMM02 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM02"]["data_7"],data_hash["VMM02"]["data_6"],data_hash["VMM02"]["data_5"],data_hash["VMM02"]["data_4"]\
                   ,data_hash["VMM02"]["data_3"],data_hash["VMM02"]["data_2"],data_hash["VMM02"]["data_1"],data_hash["VMM02"]["data_0"]))
            info("VMM03 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM03"]["data_7"],data_hash["VMM03"]["data_6"],data_hash["VMM03"]["data_5"],data_hash["VMM03"]["data_4"]\
                   ,data_hash["VMM03"]["data_3"],data_hash["VMM03"]["data_2"],data_hash["VMM03"]["data_1"],data_hash["VMM03"]["data_0"]))
            info("VMM04 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM04"]["data_7"],data_hash["VMM04"]["data_6"],data_hash["VMM04"]["data_5"],data_hash["VMM04"]["data_4"]\
                   ,data_hash["VMM04"]["data_3"],data_hash["VMM04"]["data_2"],data_hash["VMM04"]["data_1"],data_hash["VMM04"]["data_0"]))
            info("VMM05 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM05"]["data_7"],data_hash["VMM05"]["data_6"],data_hash["VMM05"]["data_5"],data_hash["VMM05"]["data_4"]\
                   ,data_hash["VMM05"]["data_3"],data_hash["VMM05"]["data_2"],data_hash["VMM05"]["data_1"],data_hash["VMM05"]["data_0"]))
            info("VMM06 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM06"]["data_7"],data_hash["VMM06"]["data_6"],data_hash["VMM06"]["data_5"],data_hash["VMM06"]["data_4"]\
                   ,data_hash["VMM06"]["data_3"],data_hash["VMM06"]["data_2"],data_hash["VMM06"]["data_1"],data_hash["VMM06"]["data_0"]))
            info("VMM07 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM07"]["data_7"],data_hash["VMM07"]["data_6"],data_hash["VMM07"]["data_5"],data_hash["VMM07"]["data_4"]\
                   ,data_hash["VMM07"]["data_3"],data_hash["VMM07"]["data_2"],data_hash["VMM07"]["data_1"],data_hash["VMM07"]["data_0"]))
            info("VMM08 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM08"]["data_7"],data_hash["VMM08"]["data_6"],data_hash["VMM08"]["data_5"],data_hash["VMM08"]["data_4"]\
                   ,data_hash["VMM08"]["data_3"],data_hash["VMM08"]["data_2"],data_hash["VMM08"]["data_1"],data_hash["VMM08"]["data_0"]))
            info("VMM09 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM09"]["data_7"],data_hash["VMM09"]["data_6"],data_hash["VMM09"]["data_5"],data_hash["VMM09"]["data_4"]\
                   ,data_hash["VMM09"]["data_3"],data_hash["VMM09"]["data_2"],data_hash["VMM09"]["data_1"],data_hash["VMM09"]["data_0"]))
            info("VMM10 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM10"]["data_7"],data_hash["VMM10"]["data_6"],data_hash["VMM10"]["data_5"],data_hash["VMM10"]["data_4"]\
                   ,data_hash["VMM10"]["data_3"],data_hash["VMM10"]["data_2"],data_hash["VMM10"]["data_1"],data_hash["VMM10"]["data_0"]))
            info("VMM11 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM11"]["data_7"],data_hash["VMM11"]["data_6"],data_hash["VMM11"]["data_5"],data_hash["VMM11"]["data_4"]\
                   ,data_hash["VMM11"]["data_3"],data_hash["VMM11"]["data_2"],data_hash["VMM11"]["data_1"],data_hash["VMM11"]["data_0"]))
            info("VMM12 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM12"]["data_7"],data_hash["VMM12"]["data_6"],data_hash["VMM12"]["data_5"],data_hash["VMM12"]["data_4"]\
                   ,data_hash["VMM12"]["data_3"],data_hash["VMM12"]["data_2"],data_hash["VMM12"]["data_1"],data_hash["VMM12"]["data_0"]))
            info("VMM13 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM13"]["data_7"],data_hash["VMM13"]["data_6"],data_hash["VMM13"]["data_5"],data_hash["VMM13"]["data_4"]\
                   ,data_hash["VMM13"]["data_3"],data_hash["VMM13"]["data_2"],data_hash["VMM13"]["data_1"],data_hash["VMM13"]["data_0"]))
            info("VMM14 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM14"]["data_7"],data_hash["VMM14"]["data_6"],data_hash["VMM14"]["data_5"],data_hash["VMM14"]["data_4"]\
                   ,data_hash["VMM14"]["data_3"],data_hash["VMM14"]["data_2"],data_hash["VMM14"]["data_1"],data_hash["VMM14"]["data_0"]))
            info("VMM15 is %s_%s_%s_%s_%s_%s_%s_%s"\
                 %(data_hash["VMM15"]["data_7"],data_hash["VMM15"]["data_6"],data_hash["VMM15"]["data_5"],data_hash["VMM15"]["data_4"]\
                   ,data_hash["VMM15"]["data_3"],data_hash["VMM15"]["data_2"],data_hash["VMM15"]["data_1"],data_hash["VMM15"]["data_0"]))
            
    def update_fpu(self, line, data_hash):
        
        m = re.search(r'status  word: 0x(\w+)',line)
        if m:   
            data_hash["STATUS_W"]["value"] = m.group(1)
            
        m = re.search(r'control word: 0x(\w+)',line)
        if m:   
            data_hash["CONTROL_W"]["value"] = m.group(1)
            
        m = re.search(r'tag word:     0x(\w+)',line)
        if m:   
            data_hash["TAG_W"]["value"] = m.group(1)
            
        m = re.search(r'operand:      0x(\w+)',line)
        if m:   
            data_hash["OPERAND"]["value"] = m.group(1)
            
        m = re.search(r'fip:          0x(\w+)',line)
        if m:   
            data_hash["FIP"]["value_h"] = m.group(1)[0:8]
            data_hash["FIP"]["value_l"] = m.group(1)[8:16]
        
        m = re.search(r'fcs:          0x(\w+)',line)
        if m:   
            data_hash["FCS"]["value"] = m.group(1)
    
        m = re.search(r'fdp:          0x(\w+)',line)
        if m:   
            data_hash["FDP"]["value_h"] = m.group(1)[0:8]
            data_hash["FDP"]["value_l"] = m.group(1)[8:16]
        
        m = re.search(r'fds:          0x(\w+)',line)
        if m:   
            data_hash["FDS"]["value"] = m.group(1)
        
        m = re.search(r'FP0 ST0\(\d+\):        raw 0x(\w+):(\w+)',line)
        if m:   
            data_hash["FP0_ST0"]["value"] = m.group(1)
            data_hash["FP0_ST0"]["value_h"] = m.group(2)[0:8]
            data_hash["FP0_ST0"]["value_l"] = m.group(2)[8:16]
        
        m = re.search(r'FP1 ST1\(\d+\):        raw 0x(\w+):(\w+)',line)
        if m:   
            data_hash["FP1_ST1"]["value"] = m.group(1)
            data_hash["FP1_ST1"]["value_h"] = m.group(2)[0:8]
            data_hash["FP1_ST1"]["value_l"] = m.group(2)[8:16]
            
        m = re.search(r'FP2 ST2\(\d+\):        raw 0x(\w+):(\w+)',line)
        if m:   
            data_hash["FP2_ST2"]["value"] = m.group(1)
            data_hash["FP2_ST2"]["value_h"] = m.group(2)[0:8]
            data_hash["FP2_ST2"]["value_l"] = m.group(2)[8:16]
        
        m = re.search(r'FP3 ST3\(\d+\):        raw 0x(\w+):(\w+)',line)
        if m:   
            data_hash["FP3_ST3"]["value"] = m.group(1)
            data_hash["FP3_ST3"]["value_h"] = m.group(2)[0:8]
            data_hash["FP3_ST3"]["value_l"] = m.group(2)[8:16]
            
        m = re.search(r'FP4 ST4\(\d+\):        raw 0x(\w+):(\w+)',line)
        if m:   
            data_hash["FP4_ST4"]["value"] = m.group(1)
            data_hash["FP4_ST4"]["value_h"] = m.group(2)[0:8]
            data_hash["FP4_ST4"]["value_l"] = m.group(2)[8:16]
        
        m = re.search(r'FP5 ST5\(\d+\):        raw 0x(\w+):(\w+)',line)
        if m:   
            data_hash["FP5_ST5"]["value"] = m.group(1)
            data_hash["FP5_ST5"]["value_h"] = m.group(2)[0:8]
            data_hash["FP5_ST5"]["value_l"] = m.group(2)[8:16]
            
        m = re.search(r'FP6 ST6\(\d+\):        raw 0x(\w+):(\w+)',line)
        if m:   
            data_hash["FP6_ST6"]["value"] = m.group(1)
            data_hash["FP6_ST6"]["value_h"] = m.group(2)[0:8]
            data_hash["FP6_ST6"]["value_l"] = m.group(2)[8:16]
        
        m = re.search(r'FP7 ST7\(\d+\):        raw 0x(\w+):(\w+)',line)
        if m:   
            data_hash["FP7_ST7"]["value"] = m.group(1)
            data_hash["FP7_ST7"]["value_h"] = m.group(2)[0:8]
            data_hash["FP7_ST7"]["value_l"] = m.group(2)[8:16]
    
    def update_msrs(self, line, data_hash):
        m = re.search(r'RDMSR: read (\w+):(\w+) from MSR (\w+)',line)
        if m:   
            data_hash["MSR_"+m.group(3)]["value_h"] = m.group(1)
            data_hash["MSR_"+m.group(3)]["value_l"] = m.group(2)
            
    def update_mmx_sse_avx(self, line, data_hash):
        
        m = re.match(r'MM\[(\d+)\]: (\w+)_(\w+)',line)
        if m:   
            data_hash["MM"+m.group(1)]["value_h"] = m.group(2)
            data_hash["MM"+m.group(1)]["value_l"] = m.group(3)
            
        m = re.search(r'MXCSR: 0x0(\w+)',line)
        if m:   
            data_hash["MXCSR"]["value"] = m.group(1)

        m = re.search(r'VMM\[(\d+)\]: (\w+)_(\w+)_(\w+)_(\w+)_(\w+)_(\w+)_(\w+)_(\w+)',line)
        if m:   
            data_hash["VMM"+m.group(1)]["data_7"] = m.group(2)
            data_hash["VMM"+m.group(1)]["data_6"] = m.group(3)
            data_hash["VMM"+m.group(1)]["data_5"] = m.group(4)
            data_hash["VMM"+m.group(1)]["data_4"] = m.group(5)
            data_hash["VMM"+m.group(1)]["data_3"] = m.group(6)
            data_hash["VMM"+m.group(1)]["data_2"] = m.group(7)
            data_hash["VMM"+m.group(1)]["data_1"] = m.group(8)
            data_hash["VMM"+m.group(1)]["data_0"] = m.group(9)
            
    def update_apic(self, line, data_hash):
        m = re.search(r'read from APIC address 0x(\w+) = (\w+)',line)
        if m:   
            data_hash["APIC_"+m.group(1)]["value"] = m.group(2)
            
    
    
    def print_apic(self, data_hash):
        
        if self.option._debug == 1:
            info("APIC_020 is %s"%(data_hash["APIC_020"]["value"]))
            info("APIC_030 is %s"%(data_hash["APIC_030"]["value"]))
            info("APIC_080 is %s"%(data_hash["APIC_080"]["value"]))
            info("APIC_090 is %s"%(data_hash["APIC_090"]["value"]))
            info("APIC_0a0 is %s"%(data_hash["APIC_0a0"]["value"]))
            info("APIC_0b0 is %s"%(data_hash["APIC_0b0"]["value"]))
            info("APIC_0d0 is %s"%(data_hash["APIC_0c0"]["value"]))
            info("APIC_0e0 is %s"%(data_hash["APIC_0d0"]["value"]))
            info("APIC_0f0 is %s"%(data_hash["APIC_0e0"]["value"]))
            info("APIC_0F0 is %s"%(data_hash["APIC_0f0"]["value"]))
            info("APIC_100 is %s"%(data_hash["APIC_100"]["value"]))
            info("APIC_110 is %s"%(data_hash["APIC_110"]["value"]))
            info("APIC_120 is %s"%(data_hash["APIC_120"]["value"]))
            info("APIC_130 is %s"%(data_hash["APIC_130"]["value"]))
            info("APIC_140 is %s"%(data_hash["APIC_140"]["value"]))
            info("APIC_150 is %s"%(data_hash["APIC_150"]["value"]))
            info("APIC_160 is %s"%(data_hash["APIC_160"]["value"]))
            info("APIC_170 is %s"%(data_hash["APIC_170"]["value"]))
            info("APIC_180 is %s"%(data_hash["APIC_180"]["value"]))
            info("APIC_190 is %s"%(data_hash["APIC_190"]["value"]))
            info("APIC_1a0 is %s"%(data_hash["APIC_1a0"]["value"]))
            info("APIC_1b0 is %s"%(data_hash["APIC_1b0"]["value"]))
            info("APIC_1c0 is %s"%(data_hash["APIC_1c0"]["value"]))
            info("APIC_1d0 is %s"%(data_hash["APIC_1d0"]["value"]))
            info("APIC_1e0 is %s"%(data_hash["APIC_1e0"]["value"]))
            info("APIC_1f0 is %s"%(data_hash["APIC_1f0"]["value"]))
            info("APIC_200 is %s"%(data_hash["APIC_200"]["value"]))
            info("APIC_210 is %s"%(data_hash["APIC_210"]["value"]))
            info("APIC_220 is %s"%(data_hash["APIC_220"]["value"]))
            info("APIC_230 is %s"%(data_hash["APIC_230"]["value"]))
            info("APIC_240 is %s"%(data_hash["APIC_240"]["value"]))
            info("APIC_250 is %s"%(data_hash["APIC_250"]["value"]))
            info("APIC_260 is %s"%(data_hash["APIC_260"]["value"]))
            info("APIC_270 is %s"%(data_hash["APIC_270"]["value"]))
            info("APIC_280 is %s"%(data_hash["APIC_280"]["value"]))
            info("APIC_2f0 is %s"%(data_hash["APIC_2f0"]["value"]))
            info("APIC_300 is %s"%(data_hash["APIC_300"]["value"]))
            info("APIC_310 is %s"%(data_hash["APIC_310"]["value"]))
            info("APIC_320 is %s"%(data_hash["APIC_320"]["value"]))
            info("APIC_330 is %s"%(data_hash["APIC_330"]["value"]))
            info("APIC_340 is %s"%(data_hash["APIC_340"]["value"]))
            info("APIC_350 is %s"%(data_hash["APIC_350"]["value"]))
            info("APIC_360 is %s"%(data_hash["APIC_360"]["value"]))
            info("APIC_370 is %s"%(data_hash["APIC_370"]["value"]))
            info("APIC_380 is %s"%(data_hash["APIC_380"]["value"]))
            info("APIC_390 is %s"%(data_hash["APIC_390"]["value"]))
            info("APIC_3e0 is %s"%(data_hash["APIC_3e0"]["value"]))
            info("APIC_3f0 is %s"%(data_hash["APIC_3f0"]["value"]))

            
            
            
    def update_tr7(self, tr7):
        
        tr7_str = "%016x"%(tr7)
        tracer.major_dump_initial["TR7"]["value_h"] = tr7_str[0:8]
        tracer.major_dump_result["TR7"]["value_h"] = tr7_str[0:8]
        tracer.major_dump_initial["TR7"]["value_l"] = tr7_str[8:16]
        tracer.major_dump_result["TR7"]["value_l"] = tr7_str[8:16]
        
        tr7_str = "%016x"%(0xffffffffffffffff-tr7+1) # reverse tr7 for pram reload
        #info(tr7_str)
        tracer.major_dump_initial["_TR7"] = {}
        tracer.major_dump_result["_TR7"] = {}
        tracer.major_dump_initial["_TR7"]["value_h"] = tr7_str[0:8]
        tracer.major_dump_result["_TR7"]["value_h"] = tr7_str[0:8]
        tracer.major_dump_initial["_TR7"]["value_l"] = tr7_str[8:16]
        tracer.major_dump_result["_TR7"]["value_l"] = tr7_str[8:16]
        
    def print_tr7(self, data_hash):
        if self.option._debug == 1:
            info("TR7 is %s_%s",data_hash["TR7"]["value_h"],data_hash["TR7"]["value_l"])

    def update_data(self, line, data_hash):
        
        self.update_arch_regs(line, data_hash)
        self.update_msrs(line, data_hash)
        self.update_fpu(line, data_hash)
        self.update_mmx_sse_avx(line, data_hash)
        self.update_apic(line, data_hash)
        
    def adjust_data(self, size, data):
        new_data = ""
        for i in range(0,2*size,2):
            new_data = data[i:i+2] + new_data 
        return new_data
            
        
    def update_program_mem(self,line,initial_program,result_program,smm_base = 0):
        data_ptr_st= 0
        #info(line)
        #m = re.search(r'LEN (\w+)',line)
        m = re.search(r'LEN (\d+) BYTES: (\w+) \[0x00(\w+)\]',line)
        if m:
            #info("LEN %s, BYTES %s, %s"%(m.group(1),m.group(2),m.group(3)))
            data_raw = m.group(2)
            if smm_base == 0:
                addr = int(m.group(3),16)
            else:
                addr = (int(m.group(3),16)&0xFFFF) + smm_base
                if eq(m.group(2),"66bb00ff0300"):
                    data_raw = "66bb00ffF0CF"# modify bochs instruction addr for sync cnr
                if eq(m.group(2),"3c64"):
                    data_raw = "3c00"# modify bochs instruction addr for sync cnr
                #info("%08x"%(smm_base))
                #info("%08x"%(addr))
                #info("%08x"%(int(m.group(3),16)))
            size = int(m.group(1),10)
            offset = addr%4
            while True:
                mem_addr = "%08x"%(addr - addr%4)

                if size + offset<= 0x4:
                    data_ptr_end = len(data_raw)
                    real_size = size
                else:
                    data_ptr_end = 2 * (4-offset) + data_ptr_st
                    real_size = 4 - offset
                data = data_raw[data_ptr_st : data_ptr_end]
                data = self.adjust_data(real_size, data)
#                 if eq(mem_addr,"000c0000"):
#                     info("real size is %d, offset is %d, data is %s"%(real_size,offset,data))
                if mem_addr in initial_program.mem_lines:
                    initial_program.check_mem_line(mem_addr,offset,real_size,data)
                else:
                    initial_program.add_mem_line(mem_addr,offset,real_size,data)
                if mem_addr in result_program.mem_lines:
                    result_program.update_mem_line(mem_addr,offset,real_size,data)
                else:
                    result_program.add_mem_line(mem_addr,offset,real_size,data)
                size = size - real_size
                addr = addr + 4
                offset = 0
                data_ptr_st = data_ptr_end
                if size <= 0:
                    break
                
    def update_data_mem(self,line, initial_data_seg,result_data_seg,smm_base = 0):
                #m = re.search(r'\[CPU0 (\w+)\]: LIN \w+ PHY 0x0000(\w+) \(len=(\d+), (\w+)\): 0x(\w+) 0x(\w+)',line)
        m = re.search(r'\[CPU0 (\w+)\]:.*PHY 0x0000(\w+) \(len=(\d+), (\w+)\): 0x(\w+)',line)
        if m:
            size = int(m.group(3),10)
            if size == 0x8:
                m = re.search(r'\[CPU0 (\w+)\]:.*PHY 0x0000(\w+) \(len=(\d+), (\w+)\): 0x(\w+) 0x(\w+)',line)
                size = int(m.group(3),10)
                data_all = self.adjust_data(size,m.group(5)+m.group(6))
#                 info("size is %d and data all is %s"%(size,data_all))
            else:
                data_all= self.adjust_data(size, m.group(5)) # need to sync program format
            cmd = m.group(1)
            if smm_base == 0:
                addr = int(m.group(2),16)
            else:
                addr = int(m.group(2),16)&0xFFFF + smm_base
            mem_type = m.group(4)
            offset = addr%4
            data_ptr_st= 0
            #info("%s %s %s %s %s"%(m.group(1),m.group(2),m.group(3),m.group(4),m.group(5)))
            while True:
                mem_addr = "%08x"%(addr - addr%4)
                if size + offset<= 0x4:
                    data_ptr_end = len(data_all)
                    real_size = size
                else:
                    data_ptr_end = 2 * (4-offset) + data_ptr_st
                    real_size = 4 - offset
                data = data_all[data_ptr_st : data_ptr_end]
                data = self.adjust_data(real_size, data)
#                 if eq("000fa204",mem_addr) or eq("000fa208",mem_addr) or eq("000fa20c",mem_addr):
#                     info("real size is %d and data all is %s"%(real_size,data))
#                     info("s is %d and e is %d"%(data_ptr_st,data_ptr_end))
                if eq(cmd,"RD"):
                    if mem_addr in initial_data_seg.mem_lines:
                        initial_data_seg.check_mem_line(mem_addr,offset,real_size,data)
                    else:
                        initial_data_seg.add_mem_line(mem_addr,offset,real_size,data)
                    if mem_addr in result_data_seg.mem_lines:
                        result_data_seg.update_mem_line(mem_addr,offset,real_size,data)
                    else:
                        result_data_seg.add_mem_line(mem_addr,offset,real_size,data)
                elif eq(cmd,"WR"):
                    if mem_addr in result_data_seg.mem_lines:
                        result_data_seg.update_mem_line(mem_addr,offset,real_size,data)
                    else:
                        result_data_seg.add_mem_line(mem_addr,offset,real_size,data)
                size = size - real_size
                addr = addr + 4
                offset = 0
                data_ptr_st = data_ptr_end
                if size <= 0:
                    break

    def check_io(self,line):
        
        m = re.search(r'IO READ mini dump: rax\(io_data\): (\w+) \w*\(io_port\): (\w+)',line)
        if m:
            io_data = m.group(1)
            io_port = int(m.group(2),16)
            offset = io_port%8 
            io_port_str = "%04x"%(io_port - offset)
            if io_port_str not in self.io_cmds.cmds:
                self.io_cmds.add_io_cmd(io_data, io_port_str, io_port)
            else:
                self.io_cmds.update_io_cmd(io_data, io_port_str, io_port)
            #info(line)
            
    def check_smm(self,line):
        m = re.search(r'SMM ENTER INSTR: (\w+) rip: (\w+)_(\w+)',line)
        if m:
            tr7 = "%016x"%(int(m.group(1)))
            tr7_tbd = "%016x"%(int(m.group(1))-tracer.delta)
            rip = m.group(2)+m.group(3)
            self.smm_cmds.store_smm(tr7, rip, tr7_tbd,tracer.major_dump_initial["MSR_1b"]["value_l"][0:3])
            self.__smm_start = 1
        m = re.search(r'SMM EXIT',line)
        if m:
            self.__smm_end = 1
    def check_reload(self,line):
        tbm_pattern = ["RDMSR","RDTSC","RDPMC","CPUID"]
        reload_base_addr = 0x40020030; # sync with replay_type2_addr
        regs_order = [3,2,5,4,7,6,9,8]
        event_order = [2,3,4,9]
        for i in range(0,len(tbm_pattern)):
            reload_cmd = "INSTR=(\w+) %s mini dump: rax: (\w+)_(\w+) rbx: (\w+)_(\w+) rcx: (\w+)_(\w+) rdx: (\w+)_(\w+) rip: (\w+)_(\w+)"\
            %(tbm_pattern[i])
            m = re.search(reload_cmd,line)
            if m:
                info("RELOAD match")
                #info("%s,%08x"%(m.group(1),int(m.group(1),16)))
                if not tracer.mini_dump_type2_initial["occur"] and not tracer.mini_dump_type2_result["occur"]:
                    tracer.mini_dump_type2_initial["occur"] = 0x1
                    tracer.mini_dump_type2_initial["TR7"]["value_l"] = "%08x"%(int(m.group(1)))
                    tracer.mini_dump_type2_initial["RAX"]["value_l"] = m.group(3)
                    tracer.mini_dump_type2_initial["RAX"]["value_h"] = m.group(2)
                    tracer.mini_dump_type2_initial["RBX"]["value_l"] = m.group(5)
                    tracer.mini_dump_type2_initial["RBX"]["value_h"] = m.group(4)
                    tracer.mini_dump_type2_initial["RCX"]["value_l"] = m.group(7)
                    tracer.mini_dump_type2_initial["RCX"]["value_h"] = m.group(6)
                    tracer.mini_dump_type2_initial["RDX"]["value_l"] = m.group(9)
                    tracer.mini_dump_type2_initial["RDX"]["value_h"] = m.group(8)
                    tracer.mini_dump_type2_initial["RIP"]["value_l"] = m.group(11)
                    tracer.mini_dump_type2_initial["RIP"]["value_h"] = m.group(10)
                    tracer.mini_dump_type2_initial["EVENTS"]["value"] = "%08x"%(0x1<<event_order[i])
                    tracer.mini_dump_type2_result["occur"] = 0x1
                    tracer.mini_dump_type2_result["TR7"]["value_l"] = "%08x"%(int(m.group(1)))
                    tracer.mini_dump_type2_result["RAX"]["value_l"] = m.group(3)
                    tracer.mini_dump_type2_result["RAX"]["value_h"] = m.group(2)
                    tracer.mini_dump_type2_result["RBX"]["value_l"] = m.group(5)
                    tracer.mini_dump_type2_result["RBX"]["value_h"] = m.group(4)
                    tracer.mini_dump_type2_result["RCX"]["value_l"] = m.group(7)
                    tracer.mini_dump_type2_result["RCX"]["value_h"] = m.group(6)
                    tracer.mini_dump_type2_result["RDX"]["value_l"] = m.group(9)
                    tracer.mini_dump_type2_result["RDX"]["value_h"] = m.group(8)
                    tracer.mini_dump_type2_result["RIP"]["value_l"] = m.group(11)
                    tracer.mini_dump_type2_result["RIP"]["value_h"] = m.group(10)
                    tracer.mini_dump_type2_result["EVENTS"]["value"] = "%08x"%(0x1<<event_order[i])
                else:
                    tracer.mini_dump_type2_result["TR7"]["value_l"] = "%08x"%(int(m.group(1)))
                    tracer.mini_dump_type2_result["RAX"]["value_l"] = m.group(3)
                    tracer.mini_dump_type2_result["RAX"]["value_h"] = m.group(2)
                    tracer.mini_dump_type2_result["RBX"]["value_l"] = m.group(5)
                    tracer.mini_dump_type2_result["RBX"]["value_h"] = m.group(4)
                    tracer.mini_dump_type2_result["RCX"]["value_l"] = m.group(7)
                    tracer.mini_dump_type2_result["RCX"]["value_h"] = m.group(6)
                    tracer.mini_dump_type2_result["RDX"]["value_l"] = m.group(9)
                    tracer.mini_dump_type2_result["RDX"]["value_h"] = m.group(8)
                    tracer.mini_dump_type2_result["RIP"]["value_l"] = m.group(11)
                    tracer.mini_dump_type2_result["RIP"]["value_h"] = m.group(10)
                    tracer.mini_dump_type2_result["EVENTS"]["value"] = "%08x"%(0x1<<event_order[i])
                for i in range(0,8):
                    regs_data = m.group(regs_order[i])
                    if not i%2:
                        reload_base_addr_str = "%08x"%(reload_base_addr+4*i)
                    offset = "%08x"%(reload_base_addr+4*i)
                    if reload_base_addr_str not in self.reload_cmds.cmds:
                        self.reload_cmds.add_reload_cmd(reload_base_addr_str,regs_data, offset)
                    else:
                        self.reload_cmds.update_reload_cmd(reload_base_addr_str,regs_data, offset)
            else:
                continue
        
    
    def check_mini_dump(self,line):
        
        self.check_io(line)
        self.check_reload(line)
        self.check_smm(line)
        
    def gen_avp(self):
        
        avp = Avp()
        with open(self.__avp_file,"w+") as avp.avp_handle:
            self.io_cmds.print_io_cmds(avp.avp_handle)
            self.reload_cmds.print_reload_cmds(avp.avp_handle)
            self.smm_cmds.print_smm_cmds(avp.avp_handle,self.__tr7)
            avp.gen_part(self.initial_data_seg, self.initial_program, tracer.major_dump_initial,"initial")
            avp.gen_part(self.result_data_seg, self.result_program, tracer.major_dump_result,"result")

            
    def gen_debug_file(self):
        pass
    
        
        
            